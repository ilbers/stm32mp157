Add minimal kas configuration

kas is able to fetch the listed repos, we can enter the build environment under
Docker and build the project manually.

What to test: kas shell open, build qemuamd64 image, run the image

How to test:
$ ./kas-container shell isar.yml
kas $ ls -la /build/conf/
kas $ rm -rf /build/conf
kas $ cd /work/isar
kas $ . ./isar-init-build-env /build
kas $ bitbake mc:qemuamd64-bookworm:isar-image-base
kas $ ls -1 tmp/deploy/images/qemuamd64
isar-image-base-debian-bookworm-qemuamd64.dpkg_status
isar-image-base-debian-bookworm-qemuamd64-initrd.img
isar-image-base-debian-bookworm-qemuamd64.manifest
isar-image-base-debian-bookworm-qemuamd64-vmlinuz
isar-image-base-debian-bookworm-qemuamd64.wic
isar-image-base-debian-bookworm-qemuamd64.wic.bmap
kas $ sudo apt-get update
kas $ sudo apt-get install -y --no-install-recommends qemu-system ovmf
kas $ /work/isar/testsuite/start_vm.py -a amd64 -d bookworm -i isar-image-base

Debian GNU/Linux 12 isar ttyS0

isar login: root

root@isar:~# poweroff
kas $ exit

Expected result:

* kas shell is opened.
* qemuamd64-bookworm image is built.
* qemuamd64-bookworm image is executed under qemu.

Notes:

* local.conf is bitbake configuration describing machine, distro and settings
  to build.

* Normally, local.conf is generated by kas from the yml file. In this example,
  we play with scenarios not described in the yml yet, so we create our own
  local.conf.

* kas generates local.conf on every run, even if it already exists. If you
  change it, exit and re-enter kas to continue your previous worl, you need to
  modify it again.
